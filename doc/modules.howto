How to write modules for shntool
--------------------------------

shntool has been designed to aid in the development of mode and format modules
by separating their code from the core of shntool.  Thus, by providing the
appropriate data and functions, you can easily write a module to do just about
anything you can imagine.

Contents:

1. Mode modules
2. Format modules
3. Guidelines for module creation
4. Global data/functions available to modules


---------------
1. Mode modules
---------------

Mode modules define the different running modes in shntool.  To create a new
mode module for shntool, you simply need to fill in a mode_module struct with
the appropriate data/functions for your mode.  This struct is defined as
follows:

typedef struct {
  char  *name;                         /* mode name, specified on command line */
  char  *alias;                        /* alternate name that invokes this mode */
  char  *description;                  /* one line description of this mode */
  void (*run_main)(int,char **,int);   /* main() function for this mode */
} mode_module;

If you are writing a mode module called 'foo', you could define your struct
thusly:

/* this is essentially main() for your module, which is called after shntool
 * sees that it was invoked with a mode of 'foo', or was invoked as 'do_foo'
 * via a symbolic link to shntool.  shntool passes argc and argv to this
 * function, as well as the position of the first command-line argument.
 */
void foo_main(int,char **,int);

mode_module mode_foo = {
  "foo",
  "do_foo",
  "does something to the input files",
  foo_main
};

Note that if your mode is named "foo", and you specify an alias for your mode
that is not equal to "shnfoo", then you are responsible for installing your
own symbolic or hard link for that alias.


-----------------
2. Format modules
-----------------

Format modules provide a way for shntool to read and/or write to different file
formats.  To create a new format module for shntool, you simply need to fill in
a format_module struct with the appropriate data/functions for your format.
This struct is defined as follows:

typedef struct {
  char   *name;                               /* format name, specified on command line in certain modes */
  char   *description;                        /* one line description of this format */
  char   *extension;                          /* extension to append to files created by this module */
  int     is_translated;                      /* is this file format a simple translation (e.g. byte-swap) of WAV? */
  int     is_compressed;                      /* is this file format a compression format? */
  char   *encoder;                            /* name of external program to handle encoding of this format - set to NULL if not applicable */
  char   *decoder;                            /* name of external program to handle decoding of this format - set to NULL if not applicable */
  int   (*is_our_file)(char *);               /* routine to determine whether the given file belongs to this format plugin */
  FILE *(*input_func)(char *,int *);          /* routine to open a file of this format for input - set to NULL if not applicable */
  FILE *(*output_func)(char *,int *);         /* routine to open a file of this format for output - set to NULL if not applicable */
  void  (*extra_info)(char *);                /* routine to display extra information in info mode - set to NULL if not applicable */
  void  (*get_arguments)(int,char **,int *);  /* routine to process any extra command-line arguments for output modes - set to NULL if not applicable */
} format_module;

If you are writing a format module called 'doh', you could define your struct
thusly:

FILE *open_input_doh(char *);
FILE *open_output_doh(char *);
int is_doh_file(char *);

format_module format_doh = {
  "doh",
  "Doh file format (output only)",
  "doh",
  0,
  1,
  NULL,
  NULL,
  is_doh_file,
  NULL,
  open_output_doh,
  NULL,
  NULL
};

In this example, the 'doh' format module does not rely on an external program to
function, only supports output to that format, and does not have any format-specific
information to display in info mode.


---------------------------------
3. Guidelines for module creation
---------------------------------

There are four things to note if you are creating a new mode or format module:

1.  All modules must be placed in the 'src/' directory.  Mode module source
    files must be named after the mode module it defines, e.g. code for a
    mode_module named 'mode_foo' should be placed in 'mode_foo.c'.  Likewise,
    format module source files must be named after the format module it defines,
    e.g. code for a format_module named 'format_bar' should be placed in
    'format_bar.c'.  The reason for the strict file/module naming scheme is
    because both the configure script and the utils/glue.sh script assume this
    naming convention when putting together Makefile rules as well as the
    modes[] and formats[] arrays.

2.  I recommend that you place all of your code in one file.  It is possible to
    separate your code into multiple files, but you're on your own if you want
    to do that.  ;)

3.  Since your mode or format module will be compiled into shntool, you should
    either declare your functions and global data as static, or at least name
    them uniquely.

4.  Finally, in order to compile your module into shntool, you simply need to
    provide the configure script with the name of your module.  For example,
    if you create a mode module named 'mode_foo', you would run the following
    command:

      ./configure --with-extra-modes=foo

    Similarly, if you create a format module named 'format_bar', you would run
    the following command:

      ./configure --with-extra-formats=bar

    (See the INSTALL file for more information on the shntool-specific
     command-line arguments that you can pass to the configure script.)

    Now your mode or format module will be compiled into shntool the next time
    you run 'make' (or 'gmake', as the case may be).


---------------------------------------------
4. Global data/functions available to modules
---------------------------------------------

Your modules will have access to several functions and data structures that can
be helpful.

Global data:
------------

modes[]   - a NULL-terminated list of pointers to the mode modules compiled
            into shntool.  No real reason to access this, unless you want to
            pass off control to another mode module.

formats[] - a NULL-terminated list of pointers to the format modules compiled
            into shntool.  You really only need to access this from mode modules
            that create output files.

Global functions:
-----------------

Look in include/*.h for global functions that your module(s) can use - they
change too often for me to give an accurate listing of them here.  I'll do my
best to provide informative comments as to what they actually do.  :)
